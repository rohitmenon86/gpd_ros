#! /usr/bin/env python

PACKAGE='gpd_ros'
import roslib
roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
camera_position = gen.add_group("Camera_Position")
workspace = gen.add_group("Workspace")

#       Name                Type      Level Description                Default Min   Max
gen.add("direction"         , int_t,    0,    "Direction to compare against for filtering",           0,      0, 10)

camera_position.add("x1"   , double_t,    0,    "Position of the camera from which the cloud was taken [1]",           0,      -10, 10)
camera_position.add("y1"   , double_t,    0,    "Position of the camera from which the cloud was taken [2]",           0,      -10, 10)
camera_position.add("z1"   , double_t,    0,    "Position of the camera from which the cloud was taken [0]",           0,      -10, 10)

workspace.add("point1_x"         , double_t,    0,    "Point1 - x",        -1,      -3, 3)
workspace.add("point1_y"         , double_t,    0,    "Point1 - y",      -0.5,      -3, 3)
workspace.add("point1_z"         , double_t,    0,    "Point1 - z",       0.3,      -3, 3)
workspace.add("point2_x"         , double_t,    0,    "Point2 - x",        -1,      -3, 3)
workspace.add("point2_y"         , double_t,    0,    "Point2 - y",       0.5,      -3, 3)
workspace.add("point2_z"         , double_t,    0,    "Point2 - z",       0.3,      -3, 3)
workspace.add("point3_x"         , double_t,    0,    "Point3 - x",      -1.5,      -3, 3)
workspace.add("point3_y"         , double_t,    0,    "Point3 - y",       0.5,      -3, 3)
workspace.add("point3_z"         , double_t,    0,    "Point3 - z",       0.3,      -3, 3)
workspace.add("height"           , double_t,    0,    "height",         1,      -3, 3)

gen.add("thresh_rad"       , double_t,    0,    
        "Direction angle in radians above which grasps are filtered.",
         0.4,      -1.5, 1.5)

gen.add("approach_direction", bool_t,   0,    "turn filtering on/off",  True)

exit(gen.generate(PACKAGE, "detect_grasp_test", "detect_grasps"))
